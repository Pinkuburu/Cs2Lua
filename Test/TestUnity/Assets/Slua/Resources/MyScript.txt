require "cs2lua__namespaces"; 

MyScript = {
	__new_object = function(...)
		return newobject(MyScript, nil, nil, "ctor", nil, ...);
	end,
	__define_class = function()
		Utility.Warn("MyScript::__define_class begin");
		local static = MyScript;
		local static_methods = {
			cctor = function()
				MyScript.__cctor();
			end,
			__cctor = function()
				if MyScript.__cctor_called then 
					return;
				else
					MyScript.__cctor_called = true;
				end;
			end,
		};

		local static_fields_build = function()
			local static_fields = {
				__attributes = MyScript__Attrs,
				__cctor_called = false,
			};
			return static_fields;
		end;

		local instance_methods = {
			Init = function(this, obj, mb)
				local s;
				s = "test test test from cs2lua !";
				UnityEngine.Debug.Log("UnityEngine.Debug:Log__Object", s);
				mb:StartCoroutine(this:TestCoroutine());
				this.root = newexternobject(UnityEngine.GameObject, nil, nil, nil, "UnityEngine.GameObject:ctor__String", "root");
				local slider;
				slider = typeas(UnityEngine.GameObject.Find("Canvas/Slider"):GetComponent("UnityEngine.GameObject:GetComponent__Type", UnityEngine.UI.Slider), UnityEngine.UI.Slider, TypeKind.Class);
				local counttxt;
				counttxt = typeas(UnityEngine.GameObject.Find("Canvas/Count"):GetComponent("UnityEngine.GameObject:GetComponent__Type", UnityEngine.UI.Text), UnityEngine.UI.Text, TypeKind.Class);
				slider.onValueChanged:AddListener((function(v)
					this:Reset();
					counttxt.text = LuaString.Format__System_String__System_Object("cube:{0}", v);
					this.max = typecast(v, System.Int32, TypeKind.Struct);
				end));
				this:Reset();
			end,
			Update = function(this)
				local i;
				i = 0;
				while (i < this.cubes.Length) do
					local offset;
					offset = condexp(((i % 2) == 1), true, 5, true, -5);
					local nr;
					nr = (this.r + (UnityEngine.Mathf.Sin(UnityEngine.Time.time) * offset));
					local angle;
					angle = condexp(((i % 2) == 1), false, (function()
							return UnityEngine.Time.time;
						end), true, -5);
					local b;
					b = newexternobject(UnityEngine.Vector3, nil, nil, nil, "UnityEngine.Vector3:ctor__Single__Single__Single", typecast(((UnityEngine.Mathf.Cos(((((i * 3.14) * 2) / this.max) + angle)) * nr)), System.Single, TypeKind.Struct), typecast(((UnityEngine.Mathf.Sin(((((i * 3.14) * 2) / this.max) + angle)) * nr)), System.Single, TypeKind.Struct), 0);
					b = wrapexternstruct(b, UnityEngine.Vector3);
					this.cubes[(i + 1)].transform.position = b;
					i = (i + 1);
				end;
				if ((this.fogStart <= 0) or (this.t > 1)) then 
					this.fogStart = UnityEngine.Time.time;
					this.bgCurrent = UnityEngine.Camera.main.backgroundColor;
					this.bgCurrent = wrapexternstruct(this.bgCurrent, UnityEngine.Color);
					local ix;
					ix = UnityEngine.Random.Range("UnityEngine.Random:Range__Int32__Int32", 0, this.colors.Length);
					this.bgColor = this.colors[(ix + 1)];
					this.bgColor = wrapexternstruct(this.bgColor, UnityEngine.Color);
				end;
				this.t = (((UnityEngine.Time.time - this.fogStart)) / 10);
				UnityEngine.Camera.main.backgroundColor = UnityEngine.Color.Lerp(this.bgCurrent, this.bgColor, this.t);
			end,
			Call = function(this, name, ...)
				local args = wrapparams({...}, System.Object, TypeKind.Class);
			end,
			TestCoroutine = wrapenumerable(function(this)
				wrapyield(newexternobject(UnityEngine.WaitForSeconds, nil, nil, nil, 10), false, true);
				local i;
				i = 0;
				while (i < 60) do
					wrapyield(newexternobject(UnityEngine.WaitForSeconds, nil, nil, nil, 1), false, true);
					UnityEngine.Debug.Log("UnityEngine.Debug:Log__Object", System.String.Format("System.String:Format__String__Object", "{0} seconds", i));
					i = (i + 1);
				end;
				return nil;
			end),
			Reset = function(this)
				if (not isequal(nil, this.cubes)) then 
					local i;
					i = 0;
					while (i < this.cubes.Length) do
						UnityEngine.Object.Destroy("UnityEngine.Object:Destroy__Object", this.cubes[(i + 1)]);
						i = (i + 1);
					end;
				end;
				this.cubes = (function()
					local d0;
					d0 = this.max;
					local arr = wraparray({}, d0, UnityEngine.GameObject, TypeKind.Class);
					for i0 = 1, d0 do
						arr[i0] = nil;
					end;
					return arr;
				end)();
				local P;
				P = UnityEngine.Resources.Load("UnityEngine.Resources:Load__String", "Particle System");
				local i;
				i = 0;
				while (i < this.max) do
					local cube;
					cube = UnityEngine.GameObject.CreatePrimitive(3);
					cube.transform.position = newexternobject(UnityEngine.Vector3, nil, nil, nil, "UnityEngine.Vector3:ctor__Single__Single__Single", (typecast(UnityEngine.Mathf.Cos((((i * 3.14) * 2) / this.max)), System.Single, TypeKind.Struct) * this.r), (typecast(UnityEngine.Mathf.Sin((((i * 3.14) * 2) / this.max)), System.Single, TypeKind.Struct) * this.r), 0);
					cube.transform:SetParent("UnityEngine.Transform:SetParent__Transform", this.root.transform);
					local mat;
					mat = cube:GetComponent("UnityEngine.GameObject:GetComponent__Type", UnityEngine.Renderer).material;
					local box;
					box = cube:GetComponent("UnityEngine.GameObject:GetComponent__Type", UnityEngine.BoxCollider);
					UnityEngine.Object.Destroy("UnityEngine.Object:Destroy__Object", box);
					local p;
					p = typeas(UnityEngine.Object.Instantiate("UnityEngine.Object:Instantiate__Object__Vector3__Quaternion", P, UnityEngine.Vector3.zero, UnityEngine.Quaternion.identity), UnityEngine.GameObject, TypeKind.Class);
					p.transform:SetParent("UnityEngine.Transform:SetParent__Transform", cube.transform);
					local ix;
					ix = UnityEngine.Random.Range("UnityEngine.Random:Range__Int32__Int32", 0, this.colors.Length);
					mat.color = this.colors[(ix + 1)];
					this.cubes[(i + 1)] = cube;
					i = (i + 1);
				end;
			end,
			ctor = function(this)
				this:__ctor();
			end,
			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
				this.bgCurrent = newexternobject(UnityEngine.Color, nil, nil, nil);
				this.bgColor = newexternobject(UnityEngine.Color, nil, nil, nil);
				this.colors = wraparray({UnityEngine.Color.red, UnityEngine.Color.blue, UnityEngine.Color.green, UnityEngine.Color.cyan, UnityEngine.Color.grey, UnityEngine.Color.white, UnityEngine.Color.yellow, UnityEngine.Color.magenta, UnityEngine.Color.black}, nil, UnityEngine.Color, TypeKind.Struct);
			end,
		};
		local instance_fields_build = function()
			local instance_fields = {
				root = __cs2lua_nil_field_value,
				r = 10,
				max = 400,
				t = 0,
				fogStart = 0,
				bgCurrent = __cs2lua_nil_field_value,
				bgColor = __cs2lua_nil_field_value,
				cubes = __cs2lua_nil_field_value,
				colors = __cs2lua_nil_field_value,
				__attributes = MyScript__Attrs,
				__ctor_called = false,
			};
			return instance_fields;
		end;

		local interfaces = {
			"ITickPlugin",
		};

		local class_info = nil;
		local method_info = {
			Init = {
				Kind = MethodKind.Ordinary,
			},
			Update = {
				Kind = MethodKind.Ordinary,
			},
			FixedUpdate = {
				Kind = MethodKind.Ordinary,
			},
			LateUpdate = {
				Kind = MethodKind.Ordinary,
			},
			Call = {
				Kind = MethodKind.Ordinary,
			},
			ctor = {
				Kind = MethodKind.Constructor,
			},
		};
		local property_info = nil;
		local event_info = nil;
		local field_info = nil;

		local __defineclass_return = defineclass(nil, "MyScript", "MyScript", static, static_methods, static_fields_build, instance_methods, instance_fields_build, interfaces, class_info, method_info, property_info, event_info, field_info, false);
		Utility.Warn("MyScript::__define_class end");
		return __defineclass_return;
	end,
};


require "cs2lua__lualib";
require "cs2lua__attributes";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "luastring";
settempmetatable(MyScript);
