require "cs2lua__namespaces"; 

TopLevel.SecondLevel.Foo = {
	__new_object = function(...)
		return newobject(TopLevel.SecondLevel.Foo, nil, nil, "ctor", nil, ...);
	end,
	add_StaticEventBridge = function(value)
	end,
	remove_StaticEventBridge = function(value)
	end,
	op_Increment = function(self)
		self.m_Test = (self.m_Test + 1);
		return self;
		return nil;
	end,
	op_Addition__TopLevel_SecondLevel_Foo__TopLevel_SecondLevel_Foo = function(self, other)
		self.m_Test = (self.m_Test + other.m_Test);
		return self;
		return nil;
	end,
	op_Addition__TopLevel_SecondLevel_Foo__System_Int32 = function(self, val)
		self.m_Test = (self.m_Test + val);
		return self;
		return nil;
	end,
	op_Explicit = function(a)
		local f;
		f = newobject(TopLevel.SecondLevel.Foo, nil, nil, "ctor", nil);
		f.m_Test = a;
		f:set_Val(newobject(TopLevel.TestStruct, nil, nil, "ctor", nil));
		local ts;
		ts = f:get_Val();
		ts = wrapstruct(ts, TopLevel.TestStruct);
		f[ts] = ts;
		local r;
		r = f[ts];
		local result;
		result = TopLevel.Singleton_TopLevel_SecondLevel_Foo.get_instance():Test123(1, 2);
		TopLevel.Singleton_TopLevel_SecondLevel_Foo.set_instance(nil);
		return f;
		return nil;
	end,
	cctor = function()
		TopLevel.SecondLevel.FooBase.cctor();
		TopLevel.SecondLevel.Foo.__cctor();
	end,
	__cctor = function()
		if TopLevel.SecondLevel.Foo.__cctor_called then 
			return;
		else
			TopLevel.SecondLevel.Foo.__cctor_called = true;
		end;
	end,
	__define_class = function()
		Utility.Warn("TopLevel.SecondLevel.Foo::__define_class begin");

		local class = TopLevel.SecondLevel.Foo;
		local static_fields_build = function()
			local static_fields = {
				__attributes = TopLevel__SecondLevel__Foo__Attrs,
				__cctor_called = false,
			};
			return static_fields;
		end;

		local instance_methods = {
			add_EventBridge = function(this, value)
			end,
			remove_EventBridge = function(this, value)
			end,
			get_Val = function(this)
				return this.m_TS;
			end,
			set_Val = function(this, value)
				value = wrapstruct(value, TopLevel.TestStruct);
				this.m_TS = value;
			end,
			get_Item = function(this, ...)
				local args = wrapparams({...}, TopLevel.TestStruct, TypeKind.Struct);
				return 1;
			end,
			set_Item = function(this, ...)
				local args = wrapparams({...}, TopLevel.TestStruct, TypeKind.Struct);
				local value = table.remove(args);
			end,
			ctor = function(this)
				this:ctor__System_Int32(0);
				this:__ctor();
				return this;
			end,
			ctor__System_Int32 = function(this, v)
				this.base:__self__ctor();
				this:__ctor();
				this.m_Test = v;
				return this;
			end,
			ctor__System_Int32__System_Int32 = function(this, a, b)
				this.base:__self__ctor();
				this:__ctor();
				return this;
			end,
			Test123 = function(this, a, b)
				return typecast(((a + b)), System.Int32, TypeKind.Struct);
			end,
			GTest__TopLevel_SecondLevel_GenericClass_bar = function(this, arg)
			end,
			GTest__TopLevel_SecondLevel_GenericClass_TopLevel_Runnable = function(this, arg)
			end,
			Iterator = wrapenumerable(function(this)
				wrapyield(nil, false, false);
				wrapyield(newexternobject(UnityEngine.WaitForSeconds, nil, nil, nil, 3), false, true);
				return nil;
			end),
			Iterator2 = wrapenumerable(function(this)
				wrapyield(nil, false, false);
				return nil;
			end),
			Test = function(this)
				this:Test123(1, wrapconst(System.Single, "NegativeInfinity"));
				local abc;
				abc = wrapconst(System.Single, "NegativeInfinity");
				local t;
				t = newobject(TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2, {TopLevel.SecondLevel.Foo.Test2}, {TypeKind.Class}, "ctor", nil, newobject(TopLevel.SecondLevel.Foo.Test1, nil, nil, "ctor", nil), newobject(TopLevel.SecondLevel.Foo.Test2, nil, nil, "ctor", nil));
				t:Test(System.Int32, 123);
				t:Test2(System.Int32, newobject(TopLevel.SecondLevel.Foo.Test1, nil, nil, "ctor", nil), newobject(TopLevel.SecondLevel.Foo.Test2, nil, nil, "ctor", nil));
				local v;
				local vv;
				vv,v = this:TestLocal(__cs2lua_out);
				if ((function() 
					local __invoke_499_19_499_35;
					__invoke_499_19_499_35,v = this:TestLocal(__cs2lua_out);
					return __invoke_499_19_499_35;
				end)() < 1) then 
				end;
				local __invoke_502_19_502_36;
				__invoke_502_19_502_36,v = this:TestLocal2(__cs2lua_out);
				if __invoke_502_19_502_36 then

				end;
				local __invoke_505_21_505_38;
				__invoke_505_21_505_38,v = this:TestLocal2(__cs2lua_out);
				if (not __invoke_505_21_505_38) then

				else
					local __invoke_508_24_508_41;
					__invoke_508_24_508_41,v = this:TestLocal2(__cs2lua_out);
					if __invoke_508_24_508_41 then

					else
					end;
				end;
				while true do
					local __invoke_514_22_514_39;
					__invoke_514_22_514_39,v = this:TestLocal2(__cs2lua_out);
					if not __invoke_514_22_514_39 then
						break;
					end;

				end;
				repeat

					local __invoke_519_26_519_43;
					__invoke_519_26_519_43,v = this:TestLocal2(__cs2lua_out);
				until not (not __invoke_519_26_519_43) ;
				local ts;
				ts = newobject(TopLevel.TestStruct, nil, nil, "ctor", nil);
				ts = wrapstruct(ts, TopLevel.TestStruct);
				ts.A = 1;
				ts.B = 2;
				ts.C = 3;
				local ts2;
				ts2 = ts;
				ts2 = wrapstruct(ts2, TopLevel.TestStruct);
				local ts3;
				ts3 = ts;
				ts3 = wrapstruct(ts3, TopLevel.TestStruct);
				this:TestValueArg(ts);
				if delegationcomparewithnil(false, "TopLevel.SecondLevel.Foo:OnSimple", this, "OnSimple", SymbolKind.Event, false) then 
					this.OnSimple();
				end;
				local f;
				f = this.OnSimple;
				if delegationcomparewithnil(false, "TopLevel.SecondLevel.Foo:f", f, nil, SymbolKind.Local, false) then 
					f();
				end;
			end,
			TestLocal = function(this, v)
				local ir;
				ir = newobject(TopLevel.Runnable, nil, nil, "ctor", nil);
				ir:TopLevel_IRunnable0_Test();
				v = 1;
				return 2, v;
			end,
			TestLocal2 = function(this, v)
				v = 0;
				return false, v;
			end,
			TestValueArg = function(this, ts)
				ts = wrapstruct(ts, TopLevel.TestStruct);
				ts.A = 4;
				ts.B = 5;
				ts.C = 6;
				return 0;
			end,
			TestContinueAndReturn = function(this)
				local i;
				i = 0;
				while (i < 100) do
					repeat

						if (i < 10) then 
							do
								break;
							end;
						end;
						do
							return i;
						end;
					until true ;
					i = (i + 1);
				end;
				return -1;
			end,
			TestSwitch = function(this)
				local i;
				i = 10;
				local __switch_572_16_580_17 = i;
				if (((__switch_572_16_580_17 == 1)) or ((__switch_572_16_580_17 == 3))) then 
					return ;
				elseif (__switch_572_16_580_17 == 2) then 
					return ;
				else
					return ;
				end;
				if (i > 3) then 
					return ;
				end;
				if typeis(this, TopLevel.SecondLevel.FooBase, TypeKind.Class) then 
					return ;
				end;
			end,
			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
				this.m_TS = newobject(TopLevel.TestStruct, nil, nil, "ctor", nil);
				this.m_HashSet = newexterncollection(System.Collections.Generic.HashSet_T, {System.String}, {TypeKind.Class}, {"one", "two", "three"}, "System.Collections.Generic.HashSet_T:ctor");
			end,
		};
		local instance_fields_build = function()
			local instance_fields = {
				OnSimple = __cs2lua_nil_field_value,
				OnSimple2 = __cs2lua_nil_field_value,
				m_Test = 0,
				m_Test2 = 0,
				m_TS = __cs2lua_nil_field_value,
				m_HashSet = __cs2lua_nil_field_value,
				__attributes = TopLevel__SecondLevel__Foo__Attrs,
				__ctor_called = false,
			};
			return instance_fields;
		end;

		local __defineclass_return = defineclass(TopLevel.SecondLevel.FooBase, "TopLevel.SecondLevel.Foo", "Foo", class, static_fields_build, instance_methods, instance_fields_build, false);
		Utility.Warn("TopLevel.SecondLevel.Foo::__define_class end");
		return __defineclass_return;
	end,

	__interfaces = nil,
	__class_info = nil,
	__method_info = {
		add_OnSimple = {
			Kind = MethodKind.EventAdd,
		},
		remove_OnSimple = {
			Kind = MethodKind.EventRemove,
		},
		add_EventBridge = {
			Kind = MethodKind.EventAdd,
		},
		remove_EventBridge = {
			Kind = MethodKind.EventRemove,
		},
		add_StaticEventBridge = {
			Kind = MethodKind.EventAdd,
			static = true,
		},
		remove_StaticEventBridge = {
			Kind = MethodKind.EventRemove,
			static = true,
		},
		get_Val = {
			Kind = MethodKind.PropertyGet,
		},
		set_Val = {
			Kind = MethodKind.PropertySet,
		},
		get_Item = {
			Kind = MethodKind.PropertyGet,
		},
		set_Item = {
			Kind = MethodKind.PropertySet,
		},
		ctor = {
			Kind = MethodKind.Constructor,
		},
		ctor__System_Int32 = {
			Kind = MethodKind.Constructor,
		},
		ctor__System_Int32__System_Int32 = {
			Kind = MethodKind.Constructor,
		},
		op_Increment = {
			Kind = MethodKind.UserDefinedOperator,
			static = true,
		},
		op_Addition__TopLevel_SecondLevel_Foo__TopLevel_SecondLevel_Foo = {
			Kind = MethodKind.UserDefinedOperator,
			static = true,
		},
		op_Addition__TopLevel_SecondLevel_Foo__System_Int32 = {
			Kind = MethodKind.UserDefinedOperator,
			static = true,
		},
		op_Explicit = {
			Kind = MethodKind.Conversion,
			static = true,
		},
		Test123 = {
			Kind = MethodKind.Ordinary,
		},
		GTest__TopLevel_SecondLevel_GenericClass_bar = {
			Kind = MethodKind.Ordinary,
		},
		GTest__TopLevel_SecondLevel_GenericClass_TopLevel_Runnable = {
			Kind = MethodKind.Ordinary,
		},
		Iterator = {
			Kind = MethodKind.Ordinary,
		},
		Iterator2 = {
			Kind = MethodKind.Ordinary,
		},
		Test = {
			Kind = MethodKind.Ordinary,
		},
	},
	__property_info = nil,
	__event_info = nil,
	__field_info = nil,
};

TopLevel.SecondLevel.Foo.Test1 = {
	__new_object = function(...)
		return newobject(TopLevel.SecondLevel.Foo.Test1, nil, nil, "ctor", nil, ...);
	end,
	cctor = function()
		TopLevel.SecondLevel.Foo.Test1.__cctor();
	end,
	__cctor = function()
		if TopLevel.SecondLevel.Foo.Test1.__cctor_called then 
			return;
		else
			TopLevel.SecondLevel.Foo.Test1.__cctor_called = true;
		end;
	end,
	__define_class = function()
		Utility.Warn("TopLevel.SecondLevel.Foo.Test1::__define_class begin");

		local class = TopLevel.SecondLevel.Foo.Test1;
		local static_fields_build = function()
			local static_fields = {
				__cctor_called = false,
			};
			return static_fields;
		end;

		local instance_methods = {
			ctor = function(this)
				this:__ctor();
			end,
			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};
		local instance_fields_build = function()
			local instance_fields = {
				__ctor_called = false,
			};
			return instance_fields;
		end;

		local __defineclass_return = defineclass(nil, "TopLevel.SecondLevel.Foo.Test1", "Test1", class, static_fields_build, instance_methods, instance_fields_build, false);
		Utility.Warn("TopLevel.SecondLevel.Foo.Test1::__define_class end");
		return __defineclass_return;
	end,

	__interfaces = nil,
	__class_info = nil,
	__method_info = {
		ctor = {
			Kind = MethodKind.Constructor,
		},
	},
	__property_info = nil,
	__event_info = nil,
	__field_info = nil,
};

TopLevel.SecondLevel.Foo.Test2 = {
	__new_object = function(...)
		return newobject(TopLevel.SecondLevel.Foo.Test2, nil, nil, "ctor", nil, ...);
	end,
	cctor = function()
		TopLevel.SecondLevel.Foo.Test2.__cctor();
	end,
	__cctor = function()
		if TopLevel.SecondLevel.Foo.Test2.__cctor_called then 
			return;
		else
			TopLevel.SecondLevel.Foo.Test2.__cctor_called = true;
		end;
	end,
	__define_class = function()
		Utility.Warn("TopLevel.SecondLevel.Foo.Test2::__define_class begin");

		local class = TopLevel.SecondLevel.Foo.Test2;
		local static_fields_build = function()
			local static_fields = {
				__cctor_called = false,
			};
			return static_fields;
		end;

		local instance_methods = {
			ctor = function(this)
				this:__ctor();
			end,
			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};
		local instance_fields_build = function()
			local instance_fields = {
				__ctor_called = false,
			};
			return instance_fields;
		end;

		local __defineclass_return = defineclass(nil, "TopLevel.SecondLevel.Foo.Test2", "Test2", class, static_fields_build, instance_methods, instance_fields_build, false);
		Utility.Warn("TopLevel.SecondLevel.Foo.Test2::__define_class end");
		return __defineclass_return;
	end,

	__interfaces = nil,
	__class_info = nil,
	__method_info = {
		ctor = {
			Kind = MethodKind.Constructor,
		},
	},
	__property_info = nil,
	__event_info = nil,
	__field_info = nil,
};

TopLevel.SecondLevel.Foo.FooChild = {
	__new_object = function(...)
		return newobject(TopLevel.SecondLevel.Foo.FooChild, nil, nil, "ctor", nil, ...);
	end,
	cctor = function()
		TopLevel.SecondLevel.Foo.FooChild.__cctor();
	end,
	__cctor = function()
		if TopLevel.SecondLevel.Foo.FooChild.__cctor_called then 
			return;
		else
			TopLevel.SecondLevel.Foo.FooChild.__cctor_called = true;
		end;
	end,
	__define_class = function()
		Utility.Warn("TopLevel.SecondLevel.Foo.FooChild::__define_class begin");

		local class = TopLevel.SecondLevel.Foo.FooChild;
		local static_fields_build = function()
			local static_fields = {
				__cctor_called = false,
			};
			return static_fields;
		end;

		local instance_methods = {
			ctor = function(this)
				this:__ctor();
			end,
			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};
		local instance_fields_build = function()
			local instance_fields = {
				m_Test1 = 123,
				m_Test2 = 456,
				__ctor_called = false,
			};
			return instance_fields;
		end;

		local __defineclass_return = defineclass(nil, "TopLevel.SecondLevel.Foo.FooChild", "FooChild", class, static_fields_build, instance_methods, instance_fields_build, false);
		Utility.Warn("TopLevel.SecondLevel.Foo.FooChild::__define_class end");
		return __defineclass_return;
	end,

	__interfaces = nil,
	__class_info = nil,
	__method_info = {
		ctor = {
			Kind = MethodKind.Constructor,
		},
	},
	__property_info = nil,
	__event_info = nil,
	__field_info = nil,
};


require "cs2lua__lualib";
require "cs2lua__attributes";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "toplevel__secondlevel__foobase";
require "toplevel__teststruct";
require "toplevel__singleton_toplevel_secondlevel_foo";
require "toplevel__secondlevel__genericclass_toplevel_secondlevel_foo_test1__innergenericclass_toplevel_secondlevel_foo_test2";
require "toplevel__runnable";
settempmetatable(TopLevel.SecondLevel.Foo.FooChild);
settempmetatable(TopLevel.SecondLevel.Foo.Test2);
settempmetatable(TopLevel.SecondLevel.Foo.Test1);
settempmetatable(TopLevel.SecondLevel.Foo);
