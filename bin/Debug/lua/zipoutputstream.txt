require "cs2lua__namespaces"; 

ZipOutputStream = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		return newobject(ZipOutputStream, nil, nil, "ctor", nil, ...);
	end,

	get_Instance = function()
		return ZipOutputStream.s_Instance;
	end,

	cctor = function()
		ZipOutputStream.__cctor();
	end,

	__cctor = function()
		if ZipOutputStream.__cctor_called then 
			return;
		else
			ZipOutputStream.__cctor_called = true;
		end;
		(= ZipOutputStream.s_Instance);
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("ZipOutputStream::__define_class begin");

		local class = ZipOutputStream;

		local obj_methods = {
			ctor = function(this, ms)
				this:__ctor();
				ZipOutputStream.get_Instance().V = 1;
				ZipOutputStream.get_Instance():Test();
				return this;
			end,

			Test = function(this)
			end,

			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};

		local obj_build = function()
			return {
				V = 0,
				__ctor_called = false,
			};
		end;

		local __defineclass_return = defineclass(nil, "ZipOutputStream", "ZipOutputStream", class, obj_methods, obj_build, false);
		Utility.Warn("ZipOutputStream::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		s_Instance = true,
		__cctor_called = true,
	},

	__obj_fields = {
		V = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__method_info = {
		ctor = {
			Kind = MethodKind.Constructor,
		},
		get_V = {
			Kind = MethodKind.PropertyGet,
		},
		set_V = {
			Kind = MethodKind.PropertySet,
		},
		Test = {
			Kind = MethodKind.Ordinary,
		},
		get_Instance = {
			Kind = MethodKind.PropertyGet,
			static = true,
		},
	},
};

ZipOutputStream.EmbedClass = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		return newobject(ZipOutputStream.EmbedClass, nil, nil, "ctor", nil, ...);
	end,

	cctor = function()
		ZipOutputStream.EmbedClass.__cctor();
	end,

	__cctor = function()
		if ZipOutputStream.EmbedClass.__cctor_called then 
			return;
		else
			ZipOutputStream.EmbedClass.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("ZipOutputStream.EmbedClass::__define_class begin");

		local class = ZipOutputStream.EmbedClass;

		local obj_methods = {
			Test = function(this)
				ZipOutputStream.get_Instance():Test();
			end,

			ctor = function(this)
				this:__ctor();
			end,

			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};

		local obj_build = function()
			return {
				__ctor_called = false,
			};
		end;

		local __defineclass_return = defineclass(nil, "ZipOutputStream.EmbedClass", "EmbedClass", class, obj_methods, obj_build, false);
		Utility.Warn("ZipOutputStream.EmbedClass::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__method_info = {
		Test = {
			Kind = MethodKind.Ordinary,
		},
		ctor = {
			Kind = MethodKind.Constructor,
		},
	},
};


require "cs2lua__lualib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(ZipOutputStream.EmbedClass);
settempmetatable(ZipOutputStream);
