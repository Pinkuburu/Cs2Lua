require "cs2lua__namespaces"; 

CUsingHelper = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		return newobject(CUsingHelper, nil, nil, "ctor", nil, ...);
	end,

	Test = function(i)
		return nil;
	end,

	ReadZip = function(bytes)
		local abc;
		abc = newarraydim2(System.Int32, TypeKind.Struct, 0, 12, 13);
		local v;
		v = 0;
		local dict;
		dict = newexterndictionary(System.Collections.Generic.Dictionary_TKey_TValue, {System.Int32, System.Int32}, {TypeKind.Struct, TypeKind.Struct}, {}, "System.Collections.Generic.Dictionary_TKey_TValue:ctor__Void");
		--
		v = (v + 1);
		if (v > 0) then

		else
			--
			local __invoke_109_16_109_42;
			__invoke_109_16_109_42,v = dict:TryGetValue(1, __cs2lua_out);
			if (__invoke_109_16_109_42 and (v == 0)) then

			else
				--
				local __unary_111_21_111_24 = v; v = (v + 1);
				if (__unary_111_21_111_24 > 0) then

				else
					--
					v = (v - 1);
					if (v > 0) then

					else
					end;
				end;
			end;
		end;
				--        if(dict.TryGetValue(1, out v) && v==0) {
		--        }
		--        while (dict.TryGetValue(1, out v) && v == 0) {
		--        }
		--        do {
		--        } while (dict.TryGetValue(1, out v) && v == 0);
		--        
		--        int v1 = ++v + 2;
		--        int v2 = v++ + 2;
		--        if(++v > 0) {
		--        }
		--        if(v++ > 0) {
		--        }
		--        while(++v > 0) {
		--        }
		--        while (v-- > 0) {
		--        }
		--        do {
		--        } while (++v > 0);
		--        do {
		--        } while (v-- > 0);
		--        

				--        ZipInputStream zipInput = new ZipInputStream(new MemoryStream(bytes));
		--		MemoryStream zipMemory = new MemoryStream();
		--		ZipOutputStream ZipStream = new ZipOutputStream(zipMemory);
		--		try
		--		{
		--			return Test(123);
		--		}
		--		catch (Exception)
		--		{
		--			return null;
		--			throw;
		--		}
		--        

		return nil;
	end,

	cctor = function()
		CUsingHelper.__cctor();
	end,

	__cctor = function()
		if CUsingHelper.__cctor_called then 
			return;
		else
			CUsingHelper.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__attributes = CUsingHelper__Attrs,
	__cctor_called = false,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("CUsingHelper::__define_class begin");

		local class = CUsingHelper;

		local obj_methods = {
			ctor = function(this, a1, a2)
				this:__ctor();
				return this;
			end,

			Dispose = function(this)
			end,

			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};

		local obj_build = function()
			return {
				__attributes = CUsingHelper__Attrs,
				__ctor_called = false,
			};
		end;

		local __defineclass_return = defineclass(nil, "CUsingHelper", "CUsingHelper", class, obj_methods, obj_build, false);
		Utility.Warn("CUsingHelper::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__attributes = true,
		__cctor_called = true,
	},

	__obj_fields = {
		__attributes = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"System.IDisposable",
	},
	__method_info = {
		ctor = {
			Kind = MethodKind.Constructor,
		},
		Dispose = {
			Kind = MethodKind.Ordinary,
		},
		Test = {
			Kind = MethodKind.Ordinary,
			static = true,
		},
		ReadZip = {
			Kind = MethodKind.Ordinary,
			static = true,
		},
	},
};


require "cs2lua__lualib";
require "cs2lua__attributes";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(CUsingHelper);
