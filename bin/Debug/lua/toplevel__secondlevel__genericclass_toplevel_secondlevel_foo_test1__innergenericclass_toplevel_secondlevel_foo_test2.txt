require "cs2lua__namespaces"; 

TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2 = {
	__new_object = function(...)
		return newobject(TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2, {TT}, {TypeKind.TypeParameter}, "ctor", nil, ...);
	end,
	cctor = function()
		TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2.__cctor();
	end,
	__cctor = function()
		if TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2.__cctor_called then 
			return;
		else
			TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2.__cctor_called = true;
		end;
	end,
	__define_class = function()
		Utility.Warn("TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2::__define_class begin");

		local class = TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2;
		local static_fields_build = function()
			local static_fields = {
				__cctor_called = false,
			};
			return static_fields;
		end;

		local instance_methods = {
			ctor = function(this, v, vv)
				this:__ctor();
				this.m_T = v;
				this.m_TT = vv;
				local obj1;
				obj1 = newtypeparamobject(TopLevel.SecondLevel.Foo.Test1);
				local obj2;
				obj2 = newtypeparamobject(TopLevel.SecondLevel.Foo.Test2);
				return this;
			end,
			Test = function(this, G, g)
				local v;
				v = typeas(g, TopLevel.SecondLevel.Foo.Test1, TypeKind.TypeParameter);
				local v2;
				v2 = typecast(typecast(g, System.Object, TypeKind.Class), TopLevel.SecondLevel.Foo.Test1, TypeKind.TypeParameter);
				local f;
				f = newobject(TopLevel.SecondLevel.Foo, nil, nil, "ctor", nil);
				TopLevel.SecondLevel.FooExtension.Test3__TopLevel_SecondLevel_Foo(f);
				--++f;
				--f++;
				----f;
				--f--;
				--int i = (++f).m_Test + (f++).m_Test + (--f).m_Test + (f--).m_Test;
			end,
			Test2 = function(this, GG, t, tt)
				local t1;
				t1 = GG;
				local t2;
				t2 = TopLevel.SecondLevel.Foo.Test1;
				local t3;
				t3 = TopLevel.SecondLevel.Foo.Test2;
				local t4;
				t4 = System.Int32;
				local v;
				v = typecast(typecast(t, System.Object, TypeKind.Class), TopLevel.SecondLevel.Foo.Test2, TypeKind.TypeParameter);
			end,
			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
				this.m_TypeT = TopLevel.SecondLevel.Foo.Test1;
				this.m_TypeTT = TopLevel.SecondLevel.Foo.Test2;
			end,
		};
		local instance_fields_build = function()
			local instance_fields = {
				m_T = __cs2lua_nil_field_value,
				m_TT = __cs2lua_nil_field_value,
				m_TypeT = __cs2lua_nil_field_value,
				m_TypeTT = __cs2lua_nil_field_value,
				__ctor_called = false,
			};
			return instance_fields;
		end;

		local __defineclass_return = defineclass(nil, "TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2", "InnerGenericClass_TopLevel_SecondLevel_Foo_Test2", class, static_fields_build, instance_methods, instance_fields_build, false);
		Utility.Warn("TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2::__define_class end");
		return __defineclass_return;
	end,

	__interfaces = nil,
	__class_info = nil,
	__method_info = {
		ctor = {
			Kind = MethodKind.Constructor,
		},
		Test = {
			Kind = MethodKind.Ordinary,
			generic = true,
		},
		Test2 = {
			Kind = MethodKind.Ordinary,
			generic = true,
		},
	},
	__property_info = nil,
	__event_info = nil,
	__field_info = nil,
};


require "cs2lua__lualib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "toplevel__secondlevel__genericclass_toplevel_secondlevel_foo_test1";
require "toplevel__secondlevel__foo";
require "toplevel__secondlevel__fooextension";
settempmetatable(TopLevel.SecondLevel.GenericClass_TopLevel_SecondLevel_Foo_Test1.InnerGenericClass_TopLevel_SecondLevel_Foo_Test2);
